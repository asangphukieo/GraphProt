.DELETE_ON_ERROR:

# don't delete intermediate files
.SECONDARY:

# parameters:
EXPERIMENT_ID:=svr_stack
R:=3
D:=6
b:=11

# paths
ROOT:=~/projects/RBPaffinity
FA_DIR:=~/projects/RBPaffinity/data/fasta/
THR_DIR:=~/projects/RBPaffinity/data/thresholds/

# binaries
FA2SHREP:=/usr/local/user/RNAtools/fasta2shrep_gspan.pl
SVRTRAIN:=~/src/libsvm-3.0/svm-train -s 3 -t 0 -m 2000
SVRPREDICT:=~/src/libsvm-3.0/svm-predict
PERF:=~/src/stat/perf

# targets
PROTEINS:=Fusip HuR PTB RBM4 SF2 SLM2 U1A VTS1 YB1
#PROTEINS:=test
#PROTEINS:=U1A
BASENAMES:=$(patsubst %,%_data_full_A,$(PROTEINS)) $(patsubst %,%_data_full_B,$(PROTEINS))
PERF_FILES:=$(patsubst %,%.perf,$(BASENAMES))
AUC_FILES:=$(patsubst %,%.auc,$(BASENAMES))

all: $(AUC_FILES) $(PERF_FILES)

%.gspan : $(FA_DIR)/%.fa
	/usr/local/perl/bin/perl $(FA2SHREP) -fa $< -stdout -stack \
	-t 3 -M 5 -wins 50 -shift 10 > $@

%.feature : %.gspan %.affy
	# create features
	ln -fs $< $* # remove suffix to have shorter filenames
	$(ROOT)/bin/NSPDK -fg $* -of -R $(R) -D $(D) -b $(b)
	-rm -f $* $@_bin # clean up after feature creation
	# add affinities to features
	mv $@ $@.tmp
	cat $@.tmp | grep -v \"^\$\" | paste -d' ' $*.affy - > $@
	-rm -rf $@.tmp # clean up affinityless feature file

%.affy : %.gspan
	# extract affinities from fasta
	cat $(FA_DIR)/$*.fa | grep '^>' | awk '{print $$2}' > $@

%.model : %.feature
	$(SVRTRAIN) $< $@

%_B.svrout : %_B.model %_A.feature
	$(SVRPREDICT) $*_A.feature $< $@

%_A.svrout : %_A.model %_B.feature
	$(SVRPREDICT) $*_B.feature $< $@

%_A.pred : %_A.svrout %_B.affy
	# combine affinities and predictions
	paste $*_B.affy $< > $@

%_B.pred : %_B.svrout %_A.affy
	# combine affinities and predictions
	paste $*_A.affy $< > $@

%.perf : BASENAME=$(firstword $(subst _, ,$<))
%.perf : $(shell echo $(BASENAME))
%.perf : HT=$(shell grep $(BASENAME) $(THR_DIR)/positive.txt | cut -f 2 -d' ')
%.perf : LT=$(shell grep $(BASENAME) $(THR_DIR)/negative.txt | cut -f 2 -d' ')
%.perf : %.pred
	# select by threshold
	( cat $< | awk '$$1 > $(HT)' | cut -f 2 | awk '{print 1 "\t" $$1 }'; \
	cat $< | awk '$$1 < $(LT)' | cut -f 2 | awk '{print 0 "\t" $$1}' ) > $@.threshold
	# compute performance measures
	$(PERF) < $@.threshold > $@
	#rm -rf $@.thresold*

%.auc : BASENAME=$(firstword $(subst _, ,$<))
%.auc : $(shell echo $(BASENAME))
%.auc : HT=$(shell grep $(BASENAME) $(THR_DIR)/positive.txt | cut -f 2 -d' ')
%.auc : LT=$(shell grep $(BASENAME) $(THR_DIR)/negative.txt | cut -f 2 -d' ')
%.auc : %.pred
	# select by threshold
	( cat $< | awk '$$1 > $(HT)' | cut -f 2 | awk '{print $$1, "\t" 1}'; \
	cat $< | awk '$$1 < $(LT)' | cut -f 2 | awk '{print $$1, "\t" 0}' ) > $@.threshold
	# compute auc and auc-pr
	java -jar ~/local/auc/auc.jar $@.threshold LIST | tail -n 2 > $@
	#rm -rf $@.threshold.*

results_aucpr.csv : $(PERF_FILES)
	grep ROC $(PERF_FILES) | tr ':' ' ' | \
	awk '{print $$1, "$(EXPERIMENT_ID)", $$NF}' | sort > roc.tmp
	grep APR $(PERF_FILES) | tr ':' ' ' | \
	awk '{print $$1, "$(EXPERIMENT_ID)", $$NF}' | cut -f 1,3 -d' ' | \
	sort > aucpr.tmp
	join roc.tmp aucpr.tmp > $@
	rm -rf roc.tmp aucpr.tmp

clean:
	-rm -rf $(MODELS) log *.gspan
